#include "/Engine/Public/Platform.ush"

void MainVS(
    in uint GlobalVertexId : SV_VertexID,
    out float2 GridVertexUV : TEXCOORD0,
    out float4 OutPosition : SV_Position
    )
{
    // Compute the cell index.
    uint GridCellIndex = GlobalVertexId / 6;

    // Compute row and column id of the cell within the grid.
    uint GridColumnId = GridCellIndex;
    uint GridRowId = GridCellIndex - GridColumnId;

    // Compute the vertex id within a 2 triangles grid cell.
    uint VertexId = GlobalVertexId - GridCellIndex * 6;

    // Compute the bottom left originated UV coordinate of the triangle's vertex within the cell.
    float2 CellVertexUV = float2(0x1 & ((VertexId + 1) / 3), VertexId & 0x1);

    // Compute the top left originated UV of the vertex within the grid.
    GridVertexUV = CellVertexUV + float2(GridColumnId, GridRowId);

    // Output vertex position.
    OutPosition = float4(GridVertexUV * 2 - 1, 0.0, 1);
}

Texture2D Tex0;
SamplerState SamplerTex0;
float Gamma;
float DepthRange;

void MainPS(
	in float2 GridVertexUV : TEXCOORD0,
    out float4 OutColor : SV_Target0)
{
    float4 sample = Tex0.Sample(SamplerTex0, float2(GridVertexUV.x, 1.0 - GridVertexUV.y));

    OutColor.xyz = pow(sample.xyz, 1.0 / Gamma);

    // The 100 here converts from centimeters to meters
	OutColor.w = sample.w / (100.0 * DepthRange);
}
